<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HttpLogFilter拦截所有Http请求打印日志</title>
    <url>/JAVA/2020/2020100901/</url>
    <content><![CDATA[<p>JAVA使用HttpLogFilter拦截所有Http请求并打印日志</p>
<a id="more"></a>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol>
<li>使用lombok注解<code>@Log4j2</code>完成log注入</li>
<li>拦截所有HTTP请求</li>
<li>打印内容为header、url、parameter、body、method</li>
</ol>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;HttpLogFilter&quot;)</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpLogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CustomRequestWrapper customRequestWrapper = <span class="keyword">new</span> CustomRequestWrapper(req);</span><br><span class="line">            <span class="comment">//获取headers</span></span><br><span class="line">            Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Enumeration&lt;?&gt; headerNames = req.getHeaderNames();</span><br><span class="line">            <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                String key = (String) headerNames.nextElement();</span><br><span class="line">                String value = req.getHeader(key);</span><br><span class="line">                headers.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            String builder = <span class="string">&quot;\nHeaders:&quot;</span> + JSON.toJSONString(headers) + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取请求地址</span></span><br><span class="line">                <span class="string">&quot;\nURL:&quot;</span> + req.getRequestURI() + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取方法名</span></span><br><span class="line">                <span class="string">&quot;\nMethod:&quot;</span> + req.getMethod() + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取parameter内容</span></span><br><span class="line">                <span class="string">&quot;\nParameters:&quot;</span> + JSON.toJSONString(req.getParameterMap()) + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取body内容</span></span><br><span class="line">                <span class="string">&quot;\nBody:&quot;</span> + customRequestWrapper.getRequestBody();</span><br><span class="line">            log.info(builder);</span><br><span class="line">            chain.doFilter(customRequestWrapper, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] requestBody;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        requestBody = HttpRequestUtil.getRequestBody(request).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(requestBody);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(requestBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> byteArrayInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRequestBody</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> (ServletInputStream servletInputStream = request.getInputStream()) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(servletInputStream));</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                builder.append(line.trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>@Mapper和@Repository的区别</title>
    <url>/JAVA/2020/2020092701/</url>
    <content><![CDATA[<p>JAVA中Dao层@Mapper和@Repository的区别</p>
<a id="more"></a>

<h1 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h1><p>@Mapper注解是mybatis的注解，是用来说明这个是一个Mapper，对应的xxxMapper.xml就是来实现这个Mapper。然后再server层使用@Autowired注解引用进来，会出现这样的情况，但是并不影响使用。 </p>
<p>这是因为@Autowired是spring的注解，提示找不到相应的bean。如果有强迫症的同学，可以使用@Resource注解，因为这个是JDK的注解。</p>
<h1 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h1><p>@Repository注解是Spring的注解，使用该注解和@Autowired注解，就不会出现爆红的情况了，原因很简单，因为@Repository注解是Sring的注解，把当前类注册成一个bean了。</p>
<p>这里的@Mapper也是可以去掉的，但是要在启动类上加上<br>@MapperScan(value = {“{package_name}.*.mapper”})</p>
<p>这句话的意思是扫描Mapper类。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开启adb远程调试</title>
    <url>/Android/2020/2020101301/</url>
    <content><![CDATA[<p>Android开启adb远程调试：先用数据线连接方式</p>
<a id="more"></a>

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>手机电脑需要在同一网络下</li>
<li>数据线</li>
</ol>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ol>
<li>开启开发者模式</li>
<li>用数据线连接电脑</li>
<li><code>adb tcpip 5555</code></li>
<li>断开数据线</li>
<li><code>adb connect ip</code>端口默认<code>5555</code></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>MapStruct嵌套对象的复制</title>
    <url>/JAVA/2021/2021111701/</url>
    <content><![CDATA[<p>MapStruct嵌套对象的复制</p>
<a id="more"></a>

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>类A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String age;</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类B</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    String title;</span><br><span class="line">    String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DTO对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADTO</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String age;</span><br><span class="line">    BDTO b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BDTO</span> </span>&#123;</span><br><span class="line">    String titleB;</span><br><span class="line">    String contentB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><p>现有A对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(name&#x3D;name, age&#x3D;18, b&#x3D;B(title&#x3D;title, content&#x3D;content))</span><br></pre></td></tr></table></figure>

<p>需要复制到<code>ADTO</code>对象中</p>
<p>使用 AMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">toEntity</span><span class="params">(ADTO adto)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ADTO <span class="title">toDTO</span><span class="params">(A a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADTO(name&#x3D;name, age&#x3D;18, b&#x3D;BDTO(titleB&#x3D;null, contentB&#x3D;null))</span><br></pre></td></tr></table></figure>

<p>不能得到正确的映射结果</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(uses = BMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">toEntity</span><span class="params">(ADTO adto)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ADTO <span class="title">toDTO</span><span class="params">(A a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>uses</code>属性指定使用到的 mappers，可以自动完成映射。BMapper内容如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mappings(&#123;</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;titleB&quot;, target = &quot;title&quot;),</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;contentB&quot;, target = &quot;content&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">B <span class="title">toEntity</span><span class="params">(BDTO adto)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mappings(&#123;</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;title&quot;, target = &quot;titleB&quot;),</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;content&quot;, target = &quot;contentB&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">BDTO <span class="title">toDTO</span><span class="params">(B a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(name&#x3D;name, age&#x3D;18, b&#x3D;B(title&#x3D;title, content&#x3D;content))</span><br><span class="line">ADTO(name&#x3D;name, age&#x3D;18, b&#x3D;BDTO(titleB&#x3D;title, contentB&#x3D;content))</span><br></pre></td></tr></table></figure>

<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>MapStruct <code>@Mapper</code>使用<code>uses</code>属性指定使用到的 mappers，可以自动完成映射。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>MapStruct</tag>
        <tag>属性赋值</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA常用的单例模式</title>
    <url>/JAVA/2021/2021111702/</url>
    <content><![CDATA[<p>JAVA常用的单例模式 饿汉式、双检查锁、静态内部类、枚举</p>
<a id="more"></a>

<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SingleTon INSTANCE = <span class="keyword">new</span> SingleTon();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SingleTon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-双检锁（懒汉式）"><a href="#2-双检锁（懒汉式）" class="headerlink" title="2. 双检锁（懒汉式）"></a>2. 双检锁（懒汉式）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonDCL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingleTonDCL singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTonDCL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTonDCL <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleTonDCL.class) &#123;</span><br><span class="line">                <span class="comment">// 注意此处还得有次判空</span></span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> SingleTonDCL();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SingleTonDCL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-静态内部类（懒汉式）"><a href="#3-静态内部类（懒汉式）" class="headerlink" title="3. 静态内部类（懒汉式）"></a>3. 静态内部类（懒汉式）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonInnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTonInnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTonInnerClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleTonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleTonInnerClass INSTANCE = <span class="keyword">new</span> SingleTonInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SingleTonInnerClass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-枚举模式（-）"><a href="#4-枚举模式（-）" class="headerlink" title="4. 枚举模式（-）"></a>4. 枚举模式（-）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingleTonEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SingleTonEnum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SingleTonEnum&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://cloud.tencent.com/developer/article/1497592">Java单例模式的7种写法中，为何用Enum枚举实现被认为是最好的方式？</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>使用工具校验 JSON 格式</title>
    <url>/JAVA/2021/2021120201/</url>
    <content><![CDATA[<p>使用工具校验 JSON 格式。</p>
<a id="more"></a>

<h1 id="使用工具校验-JSON-格式"><a href="#使用工具校验-JSON-格式" class="headerlink" title="使用工具校验 JSON 格式"></a>使用工具校验 JSON 格式</h1><p>使用的 dependency 版本为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;&#123;name:\&quot;张三\&quot;&#125;&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;&#123;\&quot;name:\&quot;张三\&quot;&#125;&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;&#123;name\&quot;:\&quot;张三\&quot;&#125;&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(<span class="string">&quot;fastJsonValid1(s) = &quot;</span> + fastJsonValid1(s));</span><br><span class="line">            System.out.println(<span class="string">&quot;fastJsonValid2(s) = &quot;</span> + fastJsonValid2(s));</span><br><span class="line">            System.out.println(<span class="string">&quot;jacksonValid(s) = &quot;</span> + jacksonValid(s));</span><br><span class="line">            System.out.println(<span class="string">&quot;gsonValid(s) = &quot;</span> + gsonValid(s));</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fastJsonValid1</span><span class="params">(String test)</span> </span>&#123;</span><br><span class="line">        JSONValidator from = JSONValidator.from(test);</span><br><span class="line">        <span class="keyword">return</span> from.validate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fastJsonValid2</span><span class="params">(String test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JSON.parse(test);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">jacksonValid</span><span class="params">(String jsonInString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            mapper.readTree(jsonInString);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">gsonValid</span><span class="params">(String jsonInString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Gson().fromJson(jsonInString, Object.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;name:&quot;张三&quot;&#125;</span><br><span class="line">fastJsonValid1(s) &#x3D; false</span><br><span class="line">fastJsonValid2(s) &#x3D; true</span><br><span class="line">jacksonValid(s) &#x3D; false</span><br><span class="line">gsonValid(s) &#x3D; true</span><br><span class="line"></span><br><span class="line">&#123;&quot;name:&quot;张三&quot;&#125;</span><br><span class="line">fastJsonValid1(s) &#x3D; false</span><br><span class="line">fastJsonValid2(s) &#x3D; false</span><br><span class="line">jacksonValid(s) &#x3D; false</span><br><span class="line">gsonValid(s) &#x3D; false</span><br><span class="line"></span><br><span class="line">&#123;name&quot;:&quot;张三&quot;&#125;</span><br><span class="line">fastJsonValid1(s) &#x3D; false</span><br><span class="line">fastJsonValid2(s) &#x3D; false</span><br><span class="line">jacksonValid(s) &#x3D; false</span><br><span class="line">gsonValid(s) &#x3D; true</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;&#125;</span><br><span class="line">fastJsonValid1(s) &#x3D; true</span><br><span class="line">fastJsonValid2(s) &#x3D; true</span><br><span class="line">jacksonValid(s) &#x3D; true</span><br><span class="line">gsonValid(s) &#x3D; true</span><br></pre></td></tr></table></figure>

<p>通过返回值我们可以看到两个问题</p>
<ol>
<li>Gson 可以允许 KEY 值不以双引号开头</li>
<li>FastJson 的 JSONValidator 和 parse 结果不同，parse 允许 key 值不用双引号包裹。</li>
</ol>
<h1 id="Gson-转换错误格式-JSON"><a href="#Gson-转换错误格式-JSON" class="headerlink" title="Gson 转换错误格式 JSON"></a>Gson 转换错误格式 JSON</h1><p>在使用 Gson 的时候发现如下一个情况</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;name&quot;: &quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>这么一个错误格式的 JSON 在 Postman 中能被识别到并且标红。<br>但是作为参数却能正常发送到后台并且不报错。后台使用的 String 接收，并由 Gson 转义。<br>转换结果为：</p>
<p><code>com.google.gson.stream.JsonReader</code>类中<code>PEEKED_UNQUOTED_NAME</code>允许key值不使用双引号。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;name: &quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;name&quot;: &quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>都被认为是合法的。<br>如果双引号只出现在前面被认为为非法。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name: &quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Gson</tag>
        <tag>FastJson</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2 局域网访问以及固定 IP</title>
    <url>/WSL2/2022/WSL2%E7%BD%91%E7%BB%9C%E7%AF%87/</url>
    <content><![CDATA[<p>WSL 局域网访问以及固定 IP。</p>
<a id="more"></a>

<h1 id="1-WSL2-局域网访问以及固定-IP"><a href="#1-WSL2-局域网访问以及固定-IP" class="headerlink" title="1. WSL2 局域网访问以及固定 IP"></a>1. WSL2 局域网访问以及固定 IP</h1><h2 id="1-固定-IP"><a href="#1-固定-IP" class="headerlink" title="1. 固定 IP"></a>1. 固定 IP</h2><p>1、（不知道有没有用）首先登陆虚拟机（Ubuntu-20.04示例）创建 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config">/etc/wsl.conf</a> ，写入以下内容，默认为true，true 将 WSL 设置为生成 /etc/resolv.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>2、使用<code>管理员模式</code>执行<code>powershell</code>脚本更改 IP （尝试过开机自启但是没找到好的方法）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> <span class="literal">-u</span> root ip addr <span class="built_in">del</span> <span class="variable">$</span>(ip addr show eth0 ^| grep <span class="string">&#x27;inet\b&#x27;</span> ^| awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> ^| head <span class="literal">-n</span> <span class="number">1</span>) dev eth0</span><br><span class="line">wsl <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> <span class="literal">-u</span> root ip addr add <span class="number">192.168</span>.<span class="number">50.2</span>/<span class="number">24</span> broadcast <span class="number">192.168</span>.<span class="number">50.255</span> dev eth0</span><br><span class="line">wsl <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> <span class="literal">-u</span> root ip route add <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span> via <span class="number">192.168</span>.<span class="number">50.1</span> dev eth0</span><br><span class="line">wsl <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> <span class="literal">-u</span> root <span class="built_in">echo</span> nameserver <span class="number">192.168</span>.<span class="number">50.1</span> ^&gt; /etc/resolv.conf</span><br><span class="line">powershell <span class="literal">-c</span> <span class="string">&quot;Get-NetAdapter &#x27;vEthernet (WSL)&#x27; | Get-NetIPAddress | Remove-NetIPAddress -Confirm:<span class="variable">$False</span>; New-NetIPAddress -IPAddress 192.168.50.1 -PrefixLength 24 -InterfaceAlias &#x27;vEthernet (WSL)&#x27;; Get-NetNat | ? Name -Eq WSLNat | Remove-NetNat -Confirm:<span class="variable">$False</span>; New-NetNat -Name WSLNat -InternalIPInterfaceAddressPrefix 192.168.50.0/24;&quot;</span></span><br></pre></td></tr></table></figure>

<p>成功后如图</p>
<p>（Windows端）</p>
<p><img src="WSL2%E7%BD%91%E7%BB%9C%E7%AF%87.assets/image-20220317182933894.png" alt="image-20220317182933894"></p>
<p>（WSL端）</p>
<p><img src="WSL2%E7%BD%91%E7%BB%9C%E7%AF%87.assets/image-20220318151307909.png" alt="image-20220318151307909"></p>
<h2 id="2-端口转发（局域网访问）"><a href="#2-端口转发（局域网访问）" class="headerlink" title="2. 端口转发（局域网访问）"></a>2. 端口转发（局域网访问）</h2><h3 id="1-、Windows-转发端口"><a href="#1-、Windows-转发端口" class="headerlink" title="1 、Windows 转发端口"></a>1 、Windows 转发端口</h3><ol>
<li><p>使用管理员模式启动 powershell</p>
</li>
<li><p>执行命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">8080</span> listenaddress=* connectport=<span class="number">8080</span> connectaddress=<span class="number">192.168</span>.<span class="number">50.2</span> protocol=tcp</span><br></pre></td></tr></table></figure>

<p>命令表示将 Windows 的 8080 端口访问转发到 WSL（192.168.50.2） 的 8080 端口上。</p>
</li>
</ol>
<p>删除命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重置端口转发规则</span></span><br><span class="line">netsh interface portproxy reset</span><br><span class="line"><span class="comment">#删除指定端口转发规则</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">9400</span> protocol=tcp</span><br></pre></td></tr></table></figure>

<h3 id="2、设置防火墙规则"><a href="#2、设置防火墙规则" class="headerlink" title="2、设置防火墙规则"></a>2、设置防火墙规则</h3><p>（不知道有没有用）打开<code>控制面板</code>中的防火墙，新增入站规则，将<code>C:\WINDOWS\System32\svchost.exe</code>程序设为允许</p>
<h1 id="2-参考资料"><a href="#2-参考资料" class="headerlink" title="2. 参考资料"></a>2. 参考资料</h1><p><a href="https://bytem.io/posts/wsl2-network-tricks/">WSL2 的一些网络访问问题 | Artin’s Blog (bytem.io)</a>⭐</p>
<p><a href="https://www.loyating.com/articles/23">wsl2固定IP解决方案 - 张子庭的博客 (loyating.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/380779630">给 WSL2 设置静态 IP 地址 - 知乎 (zhihu.com)</a>⭐</p>
]]></content>
      <categories>
        <category>WSL2</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
        <tag>网络</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
