<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HttpLogFilter拦截所有Http请求打印日志</title>
    <url>/JAVA/2020/2020100901/</url>
    <content><![CDATA[<p>JAVA使用HttpLogFilter拦截所有Http请求并打印日志</p>
<a id="more"></a>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol>
<li>使用lombok注解<code>@Log4j2</code>完成log注入</li>
<li>拦截所有HTTP请求</li>
<li>打印内容为header、url、parameter、body、method</li>
</ol>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;HttpLogFilter&quot;)</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpLogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CustomRequestWrapper customRequestWrapper = <span class="keyword">new</span> CustomRequestWrapper(req);</span><br><span class="line">            <span class="comment">//获取headers</span></span><br><span class="line">            Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            Enumeration&lt;?&gt; headerNames = req.getHeaderNames();</span><br><span class="line">            <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                String key = (String) headerNames.nextElement();</span><br><span class="line">                String value = req.getHeader(key);</span><br><span class="line">                headers.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            String builder = <span class="string">&quot;\nHeaders:&quot;</span> + JSON.toJSONString(headers) + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取请求地址</span></span><br><span class="line">                <span class="string">&quot;\nURL:&quot;</span> + req.getRequestURI() + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取方法名</span></span><br><span class="line">                <span class="string">&quot;\nMethod:&quot;</span> + req.getMethod() + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取parameter内容</span></span><br><span class="line">                <span class="string">&quot;\nParameters:&quot;</span> + JSON.toJSONString(req.getParameterMap()) + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">                <span class="comment">//获取body内容</span></span><br><span class="line">                <span class="string">&quot;\nBody:&quot;</span> + customRequestWrapper.getRequestBody();</span><br><span class="line">            log.info(builder);</span><br><span class="line">            chain.doFilter(customRequestWrapper, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] requestBody;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        requestBody = HttpRequestUtil.getRequestBody(request).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(requestBody);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(requestBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> byteArrayInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRequestBody</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> (ServletInputStream servletInputStream = request.getInputStream()) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(servletInputStream));</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                builder.append(line.trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开启adb远程调试</title>
    <url>/Android/2020/2020101301/</url>
    <content><![CDATA[<p>Android开启adb远程调试：先用数据线连接方式</p>
<a id="more"></a>

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>手机电脑需要在同一网络下</li>
<li>数据线</li>
</ol>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ol>
<li>开启开发者模式</li>
<li>用数据线连接电脑</li>
<li><code>adb tcpip 5555</code></li>
<li>断开数据线</li>
<li><code>adb connect ip</code>端口默认<code>5555</code></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>@Mapper和@Repository的区别</title>
    <url>/JAVA/2020/2020092701/</url>
    <content><![CDATA[<p>JAVA中Dao层@Mapper和@Repository的区别</p>
<a id="more"></a>

<h1 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h1><p>@Mapper注解是mybatis的注解，是用来说明这个是一个Mapper，对应的xxxMapper.xml就是来实现这个Mapper。然后再server层使用@Autowired注解引用进来，会出现这样的情况，但是并不影响使用。 </p>
<p>这是因为@Autowired是spring的注解，提示找不到相应的bean。如果有强迫症的同学，可以使用@Resource注解，因为这个是JDK的注解。</p>
<h1 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h1><p>@Repository注解是Spring的注解，使用该注解和@Autowired注解，就不会出现爆红的情况了，原因很简单，因为@Repository注解是Sring的注解，把当前类注册成一个bean了。</p>
<p>这里的@Mapper也是可以去掉的，但是要在启动类上加上<br>@MapperScan(value = {“{package_name}.*.mapper”})</p>
<p>这句话的意思是扫描Mapper类。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MapStruct嵌套对象的复制</title>
    <url>/JAVA/2020/2021111701/</url>
    <content><![CDATA[<p>MapStruct嵌套对象的复制</p>
<a id="more"></a>

<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>类A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String age;</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类B</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    String title;</span><br><span class="line">    String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DTO对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADTO</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String age;</span><br><span class="line">    BDTO b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BDTO</span> </span>&#123;</span><br><span class="line">    String titleB;</span><br><span class="line">    String contentB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><p>现有A对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(name&#x3D;name, age&#x3D;18, b&#x3D;B(title&#x3D;title, content&#x3D;content))</span><br></pre></td></tr></table></figure>

<p>需要复制到<code>ADTO</code>对象中</p>
<p>使用 AMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">toEntity</span><span class="params">(ADTO adto)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ADTO <span class="title">toDTO</span><span class="params">(A a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADTO(name&#x3D;name, age&#x3D;18, b&#x3D;BDTO(titleB&#x3D;null, contentB&#x3D;null))</span><br></pre></td></tr></table></figure>

<p>不能得到正确的映射结果</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(uses = BMapper.class, unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">toEntity</span><span class="params">(ADTO adto)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ADTO <span class="title">toDTO</span><span class="params">(A a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>uses</code>属性指定使用到的 mappers，可以自动完成映射。BMapper内容如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mappings(&#123;</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;titleB&quot;, target = &quot;title&quot;),</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;contentB&quot;, target = &quot;content&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">B <span class="title">toEntity</span><span class="params">(BDTO adto)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mappings(&#123;</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;title&quot;, target = &quot;titleB&quot;),</span></span><br><span class="line"><span class="meta">        @Mapping(source = &quot;content&quot;, target = &quot;contentB&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">BDTO <span class="title">toDTO</span><span class="params">(B a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A(name&#x3D;name, age&#x3D;18, b&#x3D;B(title&#x3D;title, content&#x3D;content))</span><br><span class="line">ADTO(name&#x3D;name, age&#x3D;18, b&#x3D;BDTO(titleB&#x3D;title, contentB&#x3D;content))</span><br></pre></td></tr></table></figure>

<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>MapStruct <code>@Mapper</code>使用<code>uses</code>属性指定使用到的 mappers，可以自动完成映射。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>MapStruct</tag>
        <tag>属性赋值</tag>
      </tags>
  </entry>
</search>
